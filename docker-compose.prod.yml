version: "1.25"

services:

  frontend:
    build: 
      context: ./frontend 
    ports:
     - "3000:3000"
    container_name: frontend-con
    volumes: 
      - /var/lib/docker/volumes/our-vol/_data
    network : hackphaistus
    restart: always
    #environment:
    #stdin_open: true

  # mysql_db:
  #   image: mysql:8.0
  #   networks: app-tier
  #   volumes:
  #   ports:
  #    - "3306:3306"
  #   environment:
  #    - MYSQL_DATABASE=app 
  #    - MYSQL_USER= #채우기
  #    - MYSQL_PASSWORD= 
  #    - MYSQL_ROOT_PASSWORD=
  #   command: 

  backend:
    build:
      context: ./backend
    ports:
     - "5000:5000" 
    container_name: backend-con
    networks: 
     - hackphaistus
    volumes:
     - /var/lib/docker/volumes/backend/_data
    restart: always
    #command: gunicorn -w 1 -b 0.0.0.0:5000 --timeout=300 run:app
   

  # rabbit:
  #  hostname: rabbit
  #  image : rabbitmq:3-management
  #  environment:
  #   - RABBITMQ_DEFAULT_USER= #채우기
  #   - RABBITMQ_DEFAULT_PASS= 
  # ports:
  # networks:
  #  - app-tier

  nginx :
    image: nginx:latest
    ports:
      - "8080:8080"
    volumes:
      - 'nginx:/app'
    depend_on:
      - frontend-con
      - backend
    networks:
      - hackphaistus
    driver: bridge # 컨테이너를 bridge로 연결
    restart: always


  db: # 서비스 명
    image: mysql # 사용할 이미지
    container_name: mysql-con # 컨테이너 이름 설정
    ports:
      - "3306:3306" # 접근 포트 설정 (컨테이너 외부:컨테이너 내부)
    environment: # -e 옵션
      
    command: # 명령어 실행
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - /var/lib/docker/volumes/mysql/_data # -v 옵션 (다렉토리 마운트 설정)
    restart: always